#!/usr/bin/env python

import rospy
from sensor_msgs.msg import Joy, Image
from nav_msgs.msg import Odometry
from cv_bridge import CvBridge, CvBridgeError
import cv2
import numpy as np
import tf

import PyKDL
import os.path as op


class UWTeleop(object):
    def __init__(self):
        rospy.init_node("uw_teleop")


        self.vel_pub1 = rospy.Publisher('/dataNavigator1', Odometry, queue_size=10)
        self.vel_pub2 = rospy.Publisher('/dataNavigator2', Odometry, queue_size=10)
        self.rate = rospy.Rate(20)

        self.joy_sub = rospy.Subscriber("/joy", Joy, self.joy_msg_callback)
        self.bf1_odom_sub = rospy.Subscriber("/uwsim/BlueFox1Odom", Odometry, self.pose1_callback)
        self.bf2_odom_sub = rospy.Subscriber("/uwsim/BlueFox2Odom", Odometry, self.pose2_callback)

        self.joy_data = Joy()
        self.vel_cmd1 = Odometry()
        self.vel_cmd2 = Odometry()

        self.bf1_pose = None
        self.bf2_pose = None

        self.joy_button = None

    def pose1_callback(self, data):
        pose = data.pose.pose
        self.bf1_pose = pose


    def pose2_callback(self, data):
        pose = data.pose.pose
        self.bf2_pose = pose

    def get_relative_pose(self, source, target):
        '''
        returns a vector pointing from source to target
        '''
        source_pos = np.array([source.position.x, source.position.y, source.position.z])
        target_pos = np.array([target.position.x, target.position.y, target.position.z])

        source_ori = source.orientation
        target_ori = target.orientation

        rel_pos = target_pos - source_pos

        source_quater = (
            source_ori.x,
            source_ori.y,
            source_ori.z,
            source_ori.w
        )

        v1 = (rel_pos[0], rel_pos[1],0,0)

        # rel_ori = tf.transformations.quaternion_multiply(tf.transformations.quaternion_multiply(source_quater,v1), tf.transformations.quaternion_conjugate(source_quater))[:3]

        rel_ori = tf.transformations.quaternion_multiply(source_quater,v1)

        #print(rel_ori)
        return target_pos - source_pos

    def get_follow_cmd(self, source_pos, target_pos, rel_pos, desired_dist=3.0):
        '''
        source vehicle follows target vehicle keeping a distance of 3.0 meters and maintaining the elevation
        '''
        vel_cmd = Odometry()

        p = 0.1
        vel_cmd.twist.twist.linear.z = p * rel_pos[2]

        if abs(np.linalg.norm(rel_pos[:2]) - desired_dist) < 0.01:
            vel_cmd.twist.twist.linear.x = 0
            vel_cmd.twist.twist.linear.y = 0
        else:
            target_point = target_pos[:2] + desired_dist * (-rel_pos[:2]/np.linalg.norm(rel_pos[:2]))
            diff = (source_pos[:2] - target_point)
            vel_cmd.twist.twist.linear.x = p * diff[0]
            vel_cmd.twist.twist.linear.y = p * diff[1]

        return vel_cmd

    def joy_msg_callback(self, data):
        '''
        joy_data.axes = [+left, +forward, +yaw, +up, +pitch, +roll]

        joy_data.buttons = [take_pictures, ...]
        '''

        self.joy_data = data
        if self.joy_data.buttons[1] == 0:
            self.joy_button = 0

            self.vel_cmd1.twist.twist.linear.x = self.joy_data.axes[1] * .125
            self.vel_cmd1.twist.twist.linear.y = -self.joy_data.axes[0] * .125
            self.vel_cmd1.twist.twist.linear.z = -self.joy_data.axes[3] * .125
            self.vel_cmd1.twist.twist.angular.x = self.joy_data.axes[4] * .125
            self.vel_cmd1.twist.twist.angular.y = self.joy_data.axes[5] * .125
            self.vel_cmd1.twist.twist.angular.z = -self.joy_data.axes[2] * .125

            # self.vel_cmd2.twist.twist.linear.x = 0
            # self.vel_cmd2.twist.twist.linear.y = 0
            # self.vel_cmd2.twist.twist.linear.z = 0
            # self.vel_cmd2.twist.twist.angular.x = 0
            # self.vel_cmd2.twist.twist.angular.y = 0
            # self.vel_cmd2.twist.twist.angular.z = 0



        if self.joy_data.buttons[1] == 1:
            self.joy_button = 1

            self.vel_cmd2.twist.twist.linear.x = self.joy_data.axes[1] * .125
            self.vel_cmd2.twist.twist.linear.y = -self.joy_data.axes[0] * .125
            self.vel_cmd2.twist.twist.linear.z = -self.joy_data.axes[3] * .125
            self.vel_cmd2.twist.twist.angular.x = self.joy_data.axes[4] * .125
            self.vel_cmd2.twist.twist.angular.y = self.joy_data.axes[5] * .125
            self.vel_cmd2.twist.twist.angular.z = -self.joy_data.axes[2] * .125

            # self.vel_cmd1.twist.twist.linear.x = 0
            # self.vel_cmd1.twist.twist.linear.y = 0
            # self.vel_cmd1.twist.twist.linear.z = 0
            # self.vel_cmd1.twist.twist.angular.x = 0
            # self.vel_cmd1.twist.twist.angular.y = 0
            # self.vel_cmd1.twist.twist.angular.z = 0


    def start_teleop(self):
        while not rospy.is_shutdown():
            if self.joy_button == 0: # user is controlling BF1, BF2 is following
                rel_pos = self.get_relative_pose(source=self.bf2_pose, target=self.bf1_pose)
                #print(rel_pos)
                source_pos = np.array([self.bf2_pose.position.x, self.bf2_pose.position.y, self.bf2_pose.position.z])
                target_pos = np.array([self.bf1_pose.position.x, self.bf1_pose.position.y, self.bf1_pose.position.z])
                self.vel_cmd2 = self.get_follow_cmd(source_pos=source_pos, target_pos=target_pos,rel_pos=rel_pos,desired_dist=3.0)

            if self.joy_button == 1: # user is controlling BF1, BF2 is following
                rel_pos = self.get_relative_pose(source=self.bf1_pose, target=self.bf2_pose)
                #print(rel_pos)
                source_pos = np.array([self.bf1_pose.position.x, self.bf1_pose.position.y, self.bf1_pose.position.z])
                target_pos = np.array([self.bf2_pose.position.x, self.bf2_pose.position.y, self.bf2_pose.position.z])
                self.vel_cmd1 = self.get_follow_cmd(source_pos=source_pos, target_pos=target_pos,rel_pos=rel_pos,desired_dist=3.0)


            self.vel_pub1.publish(self.vel_cmd1)
            self.vel_pub2.publish(self.vel_cmd2)
            self.rate.sleep()

if __name__ == "__main__":
    uw_teleop = UWTeleop()
    uw_teleop.start_teleop()
